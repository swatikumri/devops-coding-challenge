GENERIC BUG DETECTION TOOL - EXECUTION STEPS
============================================

This document provides step-by-step instructions for using the Generic Bug Detection Tool
to compare reference and current images from any application and generate Excel reports.

OVERVIEW
--------
The Generic Bug Detection Tool is a universal testing framework that:
- Compares any two images (reference vs current) to detect visual differences
- Works with any application (web, mobile, desktop, etc.)
- Generates comprehensive Excel reports with detailed analysis
- Supports batch processing for multiple image comparisons
- Provides advanced computer vision algorithms for bug detection
- Creates difference visualizations highlighting changed areas

PREREQUISITES
-------------
1. Python 3.8 or higher
2. pip3 (Python package installer)
3. Image files in supported formats (PNG, JPG, JPEG, BMP, TIFF)

INSTALLATION STEPS
------------------

1. Install Python dependencies:
   pip3 install -r requirements.txt

2. Make the test runner script executable:
   chmod +x run_generic_tests.sh

3. Setup the environment:
   ./run_generic_tests.sh setup

QUICK START
-----------

1. Prepare your images:
   - Place reference images in reference_images/ directory
   - Place current images in screenshots/ directory

2. Compare two images:
   ./run_generic_tests.sh compare --reference reference_images/app_ref.png --current screenshots/app_current.png --test-name "app_test"

3. View the Excel report:
   - Check bug_reports/ directory for the generated Excel file

DETAILED USAGE
--------------

1. SINGLE IMAGE COMPARISON
   
   Basic comparison:
   ./run_generic_tests.sh compare --reference ref.png --current current.png
   
   With custom test name:
   ./run_generic_tests.sh compare --reference ref.png --current current.png --test-name "homepage_test"
   
   With custom Excel filename:
   ./run_generic_tests.sh compare --reference ref.png --current current.png --excel "my_report.xlsx"
   
   Without difference images:
   ./run_generic_tests.sh compare --reference ref.png --current current.png --no-diff

2. BATCH PROCESSING
   
   Using simple batch file:
   ./run_generic_tests.sh batch --batch simple_batch.json
   
   Using custom batch file:
   ./run_generic_tests.sh batch --batch my_tests.json

3. DIRECT PYTHON USAGE
   
   Single comparison:
   python3 generic_bug_detector.py reference.png current.png --test-name "my_test"
   
   Batch processing:
   python3 generic_bug_detector.py --batch batch_file.json

BATCH FILE FORMATS
------------------

1. Simple Format (simple_batch.json):
   [
     ["reference_images/homepage_ref.png", "screenshots/homepage_current.png", "homepage_test"],
     ["reference_images/login_ref.png", "screenshots/login_current.png", "login_test"]
   ]

2. Detailed Format (batch_config.json):
   {
     "batch_tests": [
       {
         "test_name": "homepage_desktop",
         "reference_image": "reference_images/homepage_desktop_ref.png",
         "current_image": "screenshots/homepage_desktop_current.png"
       }
     ]
   }

CONFIGURATION
-------------

Edit generic_config.json to customize:

- threshold: Image similarity threshold (0.0-1.0)
- min_contour_area: Minimum area for significant differences
- severity_levels: Thresholds for different severity levels
- output_dir: Directory for reports and difference images
- include_difference_images: Whether to save difference visualizations

EXAMPLE WORKFLOWS
-----------------

1. WEB APPLICATION TESTING
   
   a) Capture reference screenshots of your web app
   b) Make changes to the application
   c) Capture current screenshots
   d) Run comparison:
      ./run_generic_tests.sh compare --reference ref.png --current current.png --test-name "web_app_test"

2. MOBILE APP TESTING
   
   a) Take screenshots of mobile app in reference state
   b) Update the app
   c) Take new screenshots
   d) Run batch comparison:
      ./run_generic_tests.sh batch --batch mobile_tests.json

3. DESKTOP APPLICATION TESTING
   
   a) Capture reference screenshots of desktop app
   b) Apply updates or changes
   c) Capture current screenshots
   d) Run comparison with custom config:
      ./run_generic_tests.sh compare --reference ref.png --current current.png --config custom_config.json

OUTPUT AND REPORTS
------------------

1. EXCEL REPORTS
   - Location: bug_reports/ directory
   - Format: .xlsx files with multiple worksheets
   - Worksheets:
     * Summary: Overall test statistics
     * Detailed Results: Individual test results
     * Bug Analysis: Detailed bug information
     * Statistics: Severity and type breakdowns

2. DIFFERENCE IMAGES
   - Location: bug_reports/ directory
   - Format: PNG files highlighting differences
   - Naming: diff_{test_name}_{timestamp}.png

3. CONSOLE OUTPUT
   - Real-time comparison results
   - Pass/Fail status with severity levels
   - Similarity scores and metrics

BUG DETECTION ALGORITHMS
------------------------

The tool uses advanced computer vision techniques:

1. STRUCTURAL SIMILARITY INDEX (SSIM)
   - Measures structural similarity between images
   - Range: 0.0 to 1.0 (higher is more similar)
   - Accounts for luminance, contrast, and structure

2. CONTOUR DETECTION
   - Identifies areas of difference using OpenCV
   - Filters out noise with minimum area threshold
   - Provides precise location of changes

3. SEVERITY CLASSIFICATION
   - Critical: < 70% similarity
   - High: < 80% similarity
   - Medium: < 90% similarity
   - Low: < 95% similarity

4. BUG CATEGORIZATION
   - Layout shifts: Large area differences
   - Multiple differences: Many small changes
   - Color/contrast issues: Minor visual changes
   - Text rendering issues: Font or text problems

EXCEL REPORT STRUCTURE
----------------------

1. SUMMARY WORKSHEET
   - Total tests run
   - Pass/fail statistics
   - Success rate percentage
   - Severity breakdown
   - Average similarity scores

2. DETAILED RESULTS WORKSHEET
   - Individual test results
   - Color-coded severity levels
   - Similarity scores and metrics
   - File paths and timestamps

3. BUG ANALYSIS WORKSHEET
   - Detailed bug descriptions
   - Bug types and severity
   - Location information
   - Area measurements

4. STATISTICS WORKSHEET
   - Severity distribution
   - Bug type breakdown
   - Percentage calculations

ADVANCED FEATURES
-----------------

1. CUSTOM SEVERITY LEVELS
   - Modify thresholds in config.json
   - Add new severity categories
   - Customize color coding

2. BATCH PROCESSING
   - Process multiple image pairs
   - Generate consolidated reports
   - Parallel processing support

3. DIFFERENCE VISUALIZATION
   - Highlight changed areas
   - Save difference images
   - Contour-based analysis

4. FLEXIBLE CONFIGURATION
   - Custom output directories
   - Configurable thresholds
   - Multiple image format support

TROUBLESHOOTING
---------------

1. IMAGE LOADING ERRORS
   - Check file paths are correct
   - Ensure images are in supported formats
   - Verify file permissions

2. MEMORY ISSUES
   - Reduce image sizes if needed
   - Process images in smaller batches
   - Check available system memory

3. CONFIGURATION ERRORS
   - Validate JSON syntax in config files
   - Check file paths in batch files
   - Ensure all required fields are present

4. OUTPUT ISSUES
   - Check write permissions for output directory
   - Ensure sufficient disk space
   - Verify Excel file is not open in another application

PERFORMANCE OPTIMIZATION
------------------------

1. IMAGE SIZE
   - Use appropriate image sizes for your needs
   - Consider resizing very large images
   - Balance quality vs processing time

2. BATCH PROCESSING
   - Process images in reasonable batch sizes
   - Use SSD storage for better I/O performance
   - Consider parallel processing for large batches

3. MEMORY MANAGEMENT
   - Close unused applications
   - Process images sequentially for large batches
   - Monitor system resources

SECURITY CONSIDERATIONS
-----------------------

1. IMAGE CONTENT
   - Be aware that images may contain sensitive information
   - Implement proper access controls on output directories
   - Consider data retention policies

2. FILE PERMISSIONS
   - Set appropriate permissions on output files
   - Protect configuration files
   - Secure batch files containing file paths

INTEGRATION EXAMPLES
--------------------

1. CI/CD PIPELINE
   ```bash
   # In your CI script
   ./run_generic_tests.sh batch --batch regression_tests.json
   if [ $? -ne 0 ]; then
       echo "Visual regression tests failed"
       exit 1
   fi
   ```

2. AUTOMATED TESTING
   ```bash
   # Daily regression testing
   ./run_generic_tests.sh compare --reference daily_ref.png --current daily_current.png --test-name "daily_regression"
   ```

3. MANUAL TESTING
   ```bash
   # Before/after comparison
   ./run_generic_tests.sh compare --reference before.png --current after.png --test-name "feature_comparison"
   ```

This tool provides a robust foundation for visual regression testing across any type of application and can be easily integrated into existing testing workflows.